"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4420],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,k=p["".concat(s,".").concat(d)]||p[d]||m[d]||r;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_label:"First 2D Game"},l="2D Unity Game",o={unversionedId:"unity/01_2d_game",id:"unity/01_2d_game",title:"2D Unity Game",description:"Cheat Sheet",source:"@site/docs/unity/01_2d_game.md",sourceDirName:"unity",slug:"/unity/01_2d_game",permalink:"/Untitled-Gundam-Game/docs/unity/01_2d_game",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/unity/01_2d_game.md",tags:[],version:"current",frontMatter:{sidebar_label:"First 2D Game"},sidebar:"tutorialSidebar",previous:{title:"Game Mechanics in Unity",permalink:"/Untitled-Gundam-Game/docs/unity/game_mechanics"},next:{title:".NET",permalink:"/Untitled-Gundam-Game/docs/dotnet/introduction"}},s={},u=[{value:"Cheat Sheet",id:"cheat-sheet",level:3},{value:"Game Design:",id:"game-design",level:3},{value:"Fundamental Concepts:",id:"fundamental-concepts",level:3},{value:"Collision Detection",id:"collision-detection",level:3},{value:"Best practices",id:"best-practices",level:3},{value:"Publishing your unity build",id:"publishing-your-unity-build",level:3}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2d-unity-game"},"2D Unity Game"),(0,i.kt)("h3",{id:"cheat-sheet"},"Cheat Sheet"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/2018.1/Documentation/Manual/UnityHotkeys.html"},"Unity Cheat Sheet")),(0,i.kt)("li",{parentName:"ul"},"Duplicate object : Ctrl + D"),(0,i.kt)("li",{parentName:"ul"})),(0,i.kt)("h3",{id:"game-design"},"Game Design:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Game overview screen:"),(0,i.kt)("li",{parentName:"ul"},"Player experience:")),(0,i.kt)("h3",{id:"fundamental-concepts"},"Fundamental Concepts:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"GameObject: Fundamental building block in unity --\x3e Represents every object"),(0,i.kt)("li",{parentName:"ul"},"Component: Functional pieces of every GameObject. Properties that define the behaviour of a GameObject."),(0,i.kt)("li",{parentName:"ul"},"Sprite: 2D graphic object that comes from a bitmap image",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Sprites are made from pixels"),(0,i.kt)("li",{parentName:"ul"},"Unit: Unit in unity have no meaning. New assets default to 100 pixel s per unit"))),(0,i.kt)("li",{parentName:"ul"},"Transformations",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Rotate"),(0,i.kt)("li",{parentName:"ul"},"Translate"),(0,i.kt)("li",{parentName:"ul"},"Scale"))),(0,i.kt)("li",{parentName:"ul"},"Methods are 3D by default. Override 2D versions of methods by appending 2D to the overriden method"),(0,i.kt)("li",{parentName:"ul"},"Serialize variables in unity: Append ",(0,i.kt)("inlineCode",{parentName:"li"},"SerializeField")," to variables to allow changing the value in the unity inspector",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Value in the inspector overrides the constant value defined in the code")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"[SerializeField] float steerSpeed = 1f;\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Input System: Convert physical action to game information",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Unity has an old and new system"),(0,i.kt)("li",{parentName:"ul"},"Old: Uses string reference to input manager. Values in range ","[-1, 1]",".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'"Horizontal" and "Vertical" Axis defined in your project settings --\x3e We use these string references'))),(0,i.kt)("li",{parentName:"ul"},"New:"))),(0,i.kt)("li",{parentName:"ul"},"FPS impacts how often the update function is called. FPS and updates are proportional",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Need to multiple each movement by ",(0,i.kt)("inlineCode",{parentName:"li"},"time.deltaTime")," to make movement framerate independent"))),(0,i.kt)("li",{parentName:"ul"},"Collision:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Colliders (2D): Detects overlapping colliders"),(0,i.kt)("li",{parentName:"ul"},"RigidBody (2D): Causes interaction between colliders in physics engine"),(0,i.kt)("li",{parentName:"ul"},"Detect collisions (2D) with OnCollisionEnter2D"))),(0,i.kt)("li",{parentName:"ul"},"Encapsulation with empty objects: TODO:"),(0,i.kt)("li",{parentName:"ul"},"References: Reference to other GameObject(s)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"E.G. Used to fix camera's positions to player object"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.unity3d.com/Manual/ExecutionOrder.html"},(0,i.kt)("strong",{parentName:"a"},"Unity Execution Order")),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Physics is fixed"),(0,i.kt)("li",{parentName:"ul"},"Late Update: ")))),(0,i.kt)("h3",{id:"collision-detection"},"Collision Detection"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/Manual/CollidersOverview.html"},"Detailed Collision Documentation")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Mesh Collider")," (3D) or ",(0,i.kt)("strong",{parentName:"li"},"polygon collider")," (2D) match the shape of the object the component is attached to "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Static colliders")," : Create motionless objects such as floors using colliders without a RigidBody component "),(0,i.kt)("li",{parentName:"ul"},"Physics material: Can attach physical properties to collision (e.g. surface materials like ice which are slippery)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Triggers"),": Triggers are not considered as solid objects but have collision detection",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"OnTriggerEnter")," : Triggers callback event when another collider touches the trigger collider"),(0,i.kt)("li",{parentName:"ul"},"Can give objects Tags. The string reference to a tag is checked OnTriggerEnter"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"OnCollisionEnter")," : Callback to initiate action on collision (or OnCollisionEnter2D)"),(0,i.kt)("li",{parentName:"ul"},"See the collision matrix for all the interactions")),(0,i.kt)("h3",{id:"best-practices"},"Best practices"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Different scripts for different behaviours")),(0,i.kt)("h3",{id:"publishing-your-unity-build"},"Publishing your unity build"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install Unity Publish WebGL package"),(0,i.kt)("li",{parentName:"ul"},"Build as WebGL")))}m.isMDXComponent=!0}}]);